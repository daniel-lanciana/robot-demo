== Brief

A simulation of a toy robot moving on a square tabletop. Programming exercise for REA job application. Running demo at: https://floating-cove-6107.herokuapp.com

== Requirements

* 5x5 table
* No obstructions
* Any movement resulting in the robot falling off the table are to be ignored. Further input accepted.
* Commands: PLACE, MOVE, LEFT, RIGHT, REPORT
  * PLACE(X, Y, FACING) places the robot on the table facing the direction input
  * MOVE the robot 1 space forward
  * LEFT rotate the robot 90 degrees
  * RIGHT rototate the robot 90 degrees
  * REPORT announces the X, Y and direction the robot is facing
* Origin position 0,0 the Southwest corner
* Robot must be placed on the table
* Ignore all commands until a valid PLACE command
* Robot can be re-placed on the table
* Input source developer's choice (standard input, file etc.)
* Graphical representation not required

== Comments

* Read up on Minitest v RSpec, decided to choose Minitest with standard matchers/mocks for simplicity. Easy enough to leverage Mocha, Shoulda etc.
* Unit tests anticipate the use of a global config and non-predetermined square board size (extensible)
* Decided to use web application as the input source. Designed with adapter pattern to allow easy porting to other input sources (e.g. command line)
* Unit tests for Robot model, input adapter, basic controller
* Integration test for entire simulation
* Tests exclude method brackets for cleaner readability (plus little chaining occuring)
* One assertion per test
* Ignores case
* TDD used, but tests may need to be fixed as IDE has no static checking and can't run tests yet because objects do not exist (e.g. NameError)
* Monkey patch Array object to support infinite LinkedList next/prev functionality for cleaner robot rotation (no switch statements)
* Much less help from the IDE than a static typed language, easier to StackOverflow search!
* Need to require 'test_helper' in order to load AppConfig and extending the ActionController (tests run slower)
* Full code comments, use of static methods where applicable
* Generated rdoc
* Conventions (single/double quotes, brackets around arguments)? Consensus? Consistency?
* Web interface for ease-of-use (free text, buttons, optional board representation). Borrowed REA styling instead of Bootstrap etc.
* Deployed to Heroku (bit slow performance, but it's free!). Installing pg gem was a (once-off) pain point.

== Resources

* http://blog.arvidandersson.se/2012/03/28/minimalicous-testing-in-ruby-1-9 (Minitest introduction, Spec-only)
* http://ruby.awsblog.com/post/TxUMU0234OS1Q3/From-RSpec-to-Minitest (pro Minitest, Spec-only)
* http://brandonhilkert.com/blog/7-reasons-why-im-sticking-with-minitest-and-fixtures-in-rails/ (pro Minitest and Fixtures)
* http://code.tutsplus.com/tutorials/ruby-for-newbies-testing-with-rspec--net-21297 (simple RSpec guide)
* http://www.agileventures.org/articles/testing-with-rspec-stubs-mocks-factories-what-to-choose (Mocks)
* http://www.mattsears.com/articles/2011/12/10/minitest-quick-reference (Minitest cheat sheet)
* http://regex101.com/ (regular expression tester)